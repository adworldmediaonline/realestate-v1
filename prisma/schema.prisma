// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  role          String?
  initials      String?
  sessions      Session[]
  accounts      Account[]
  favorites     UserFavorite[] @relation("UserFavorites")
  inquiries     Inquiry[] @relation("UserInquiries")
  bookings      Booking[] @relation("UserBookings")
  reviews       Review[] @relation("UserReviews")
  properties    Property[] @relation("OwnerToProperties")

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Property {
  id          String   @id @default(cuid())
  name        String
  description String
  propertyType String @default("house")
  price       Float
  location    String
  address     String?
  bedrooms    Int      @default(0)
  bathrooms   Int      @default(0)
  area        Float?
  features    String[] // JSON array of features
  status      PropertyStatus @default(DRAFT)
  ownerId     String
  slug        String   @unique
  thumbnail   Json?
  images      Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  owner       User     @relation("OwnerToProperties", fields: [ownerId], references: [id])
  properties  UserFavorite[] @relation("PropertyFavorites")
  inquiries   Inquiry[] @relation("PropertyInquiries")
  bookings    Booking[] @relation("PropertyBookings")
  reviews     Review[] @relation("PropertyReviews")

  @@map("property")
}

enum PropertyStatus {
  DRAFT
  PUBLISHED
  UNPUBLISHED
}

model UserFavorite {
  id         String   @id @default(cuid())
  userId     String
  propertyId String
  createdAt  DateTime @default(now())

  user       User     @relation("UserFavorites", fields: [userId], references: [id], onDelete: Cascade)
  property   Property @relation("PropertyFavorites", fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
  @@map("user_favorite")
}

model Inquiry {
  id         String   @id @default(cuid())
  userId     String
  propertyId String
  message    String
  status     InquiryStatus @default(PENDING)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  user       User     @relation("UserInquiries", fields: [userId], references: [id])
  property   Property @relation("PropertyInquiries", fields: [propertyId], references: [id])

  @@map("inquiry")
}

enum InquiryStatus {
  PENDING
  RESPONDED
  CLOSED
}

model Booking {
  id         String   @id @default(cuid())
  userId     String
  propertyId String
  startDate  DateTime
  endDate    DateTime
  status     BookingStatus @default(PENDING)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  user       User     @relation("UserBookings", fields: [userId], references: [id])
  property   Property @relation("PropertyBookings", fields: [propertyId], references: [id])

  @@map("booking")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Review {
  id         String   @id @default(cuid())
  userId     String
  propertyId String
  rating     Int      @default(5) // 1-5 stars
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  user       User     @relation("UserReviews", fields: [userId], references: [id])
  property   Property @relation("PropertyReviews", fields: [propertyId], references: [id])

  @@map("review")
}
